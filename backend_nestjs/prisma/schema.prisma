// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String   @unique
  email     String?  @unique
  idCard    String?  @map("id_card")
  password  String
  role     String     @default("USER")
  status   String     @default("ACTIVE")
  updatedBy Int?     @map("updated_by") // 更新者ID
  deletedAt DateTime? @map("deleted_at") // 软删除字段
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联关系
  patients        Patient[]
  orders          Order[]
  createdOrders   Order[]   @relation("OrderCreatedBy")
  updatedOrders   Order[]   @relation("OrderUpdatedBy")
  updatedPatients Patient[] @relation("PatientUpdatedBy")
  updatedUsers    User[]    @relation("UserUpdatedBy")
  updater         User?     @relation("UserUpdatedBy", fields: [updatedBy], references: [id])
  userRoles       UserRole[]

  @@map("users")
}

// 就诊人表
model Patient {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  name              String
  gender            String   @default("UNKNOWN")
  birthday          DateTime
  phone             String?
  idCard            String?  @map("id_card")
  medicalInsurance  String?  @map("medical_insurance")
  relationship      String? // 与用户的关系
  emergencyContact  String?  @map("emergency_contact")
  allergies         String? // 过敏史
  medicalHistory    String?  @map("medical_history") // 病史
  updatedBy         Int?     @map("updated_by") // 更新者ID
  deletedAt         DateTime? @map("deleted_at") // 软删除字段
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // 关联关系
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  updater        User?           @relation("PatientUpdatedBy", fields: [updatedBy], references: [id])
  orders         Order[]
  medicalRecords MedicalRecord[]

  @@map("patients")
}

// 订单表
model Order {
  id          Int         @id @default(autoincrement())
  orderNo     String      @unique @map("order_no")
  userId      Int         @map("user_id")
  patientId   Int         @map("patient_id")
  totalAmount Float       @map("total_amount")
  paidAmount  Float       @default(0) @map("paid_amount")
  status      String      @default("PENDING")
  orderType   String      @default("MEDICAL") @map("order_type")
  description String?
  createdById Int?        @map("created_by_id")
  updatedBy   Int?        @map("updated_by") // 更新者ID
  deletedAt   DateTime?   @map("deleted_at") // 软删除字段
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // 关联关系
  user      User        @relation(fields: [userId], references: [id])
  patient   Patient     @relation(fields: [patientId], references: [id])
  createdBy User?       @relation("OrderCreatedBy", fields: [createdById], references: [id])
  updater   User?       @relation("OrderUpdatedBy", fields: [updatedBy], references: [id])
  items     OrderItem[]
  payments  Payment[]
  refunds   Refund[]

  @@map("orders")
}

// 订单项表
model OrderItem {
  id       Int     @id @default(autoincrement())
  orderId  Int     @map("order_id")
  itemName String  @map("item_name")
  itemCode String? @map("item_code")
  price    Float
  quantity Int     @default(1)
  amount   Float
  category String? // 服务类别

  // 关联关系
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// 支付表
model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @map("order_id")
  paymentNo     String        @unique @map("payment_no")
  amount        Float
  paymentMethod String        @map("payment_method") @default("CASH")
  paymentTime   DateTime?     @map("payment_time")
  status        String        @default("PENDING")
  transactionId String?       @map("transaction_id")
  remark        String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // 关联关系
  order   Order    @relation(fields: [orderId], references: [id])
  refunds Refund[]

  @@map("payments")
}

// 退款表
model Refund {
  id        Int          @id @default(autoincrement())
  orderId   Int          @map("order_id")
  paymentId Int?         @map("payment_id")
  refundNo  String       @unique @map("refund_no")
  amount    Float
  reason    String
  status      String       @default("PENDING")
  processedAt DateTime?  @map("processed_at")
  remark    String?
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  // 关联关系
  order   Order    @relation(fields: [orderId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@map("refunds")
}

// 病历表
model MedicalRecord {
  id         Int      @id @default(autoincrement())
  patientId  Int      @map("patient_id")
  visitDate  DateTime @map("visit_date")
  department String
  doctor     String
  diagnosis  String
  treatment  String?
  notes      String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // 关联关系
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

// 系统参数表
model SystemParam {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  type        String   @default("string") // string, number, boolean, json
  category    String   @default("general")
  description String?
  isSystem    Boolean  @default(false) @map("is_system")
  deletedAt   DateTime? @map("deleted_at") // 软删除字段
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("system_params")
}

// 角色表
model Role {
  id          Int       @id @default(autoincrement())
  name        String
  code        String    @unique
  description String?
  enabled     Boolean   @default(true)
  isSystem    Boolean   @default(false) @map("is_system")
  sort        Int       @default(0)
  deletedAt   DateTime? @map("deleted_at") // 软删除字段
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // 关联关系
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

// 权限表
model Permission {
  id        Int       @id @default(autoincrement())
  name      String
  code      String    @unique
  type      String    @default("menu") // menu, button, api
  parentId  Int?      @map("parent_id")
  path      String?
  icon      String?
  sort      Int       @default(0)
  enabled   Boolean   @default(true)
  deletedAt DateTime? @map("deleted_at") // 软删除字段
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // 关联关系
  parent          Permission?      @relation("PermissionParent", fields: [parentId], references: [id])
  children        Permission[]     @relation("PermissionParent")
  rolePermissions RolePermission[]

  @@map("permissions")
}

// 用户角色关联表
model UserRole {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")
  roleId Int @map("role_id")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// 角色权限关联表
model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int @map("role_id")
  permissionId Int @map("permission_id")

  // 关联关系
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// 字典类型表
model DictionaryType {
  id          Int      @id @default(autoincrement())
  name        String
  code        String   @unique
  description String?
  status      String   @default("active") // active, inactive
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联关系
  items DictionaryItem[]

  @@map("dictionary_types")
}

// 字典项表
model DictionaryItem {
  id          Int      @id @default(autoincrement())
  typeId      Int      @map("type_id")
  label       String
  value       String
  sort        Int      @default(0)
  status      String   @default("active") // active, inactive
  description String?
  parentId    Int?     @map("parent_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联关系
  type     DictionaryType  @relation(fields: [typeId], references: [id], onDelete: Cascade)
  parent   DictionaryItem? @relation("DictionaryItemParent", fields: [parentId], references: [id])
  children DictionaryItem[] @relation("DictionaryItemParent")

  @@map("dictionary_items")
}

// 操作日志表
model AuditLog {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id")
  username     String
  userRealName String   @map("user_real_name")
  action       String
  resource     String
  resourceId   String?  @map("resource_id")
  method       String
  path         String
  ip           String
  userAgent    String   @map("user_agent")
  requestData  String?  @map("request_data") // JSON string
  responseData String?  @map("response_data") // JSON string
  status       String   @default("success") // success, failed
  errorMessage String?  @map("error_message")
  duration     Int      @default(0) // 请求耗时(ms)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}

// 通知模板表
model NotificationTemplate {
  id        Int      @id @default(autoincrement())
  name      String
  type      String   // email, sms, system, push
  title     String
  content   String
  variables String?  // JSON array of variable names
  status    String   @default("active") // active, inactive
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联关系
  records NotificationRecord[]

  @@map("notification_templates")
}

// 通知记录表
model NotificationRecord {
  id            Int      @id @default(autoincrement())
  templateId    Int      @map("template_id")
  templateName  String   @map("template_name")
  type          String   // email, sms, system, push
  title         String
  content       String
  recipient     String
  recipientType String   @map("recipient_type") // user, role, all
  status        String   @default("pending") // pending, sent, failed, read
  sentAt        DateTime? @map("sent_at")
  readAt        DateTime? @map("read_at")
  errorMessage  String?  @map("error_message")
  createdAt     DateTime @default(now()) @map("created_at")

  // 关联关系
  template NotificationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("notification_records")
}

// 数据备份表
model Backup {
  id          Int      @id @default(autoincrement())
  name        String
  type        String   @default("full") // full, incremental
  status      String   @default("pending") // pending, running, completed, failed
  filePath    String?  @map("file_path")
  fileSize    Int?     @map("file_size")
  description String?
  errorMessage String? @map("error_message")
  startedAt   DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("backups")
}

// 枚举定义
// SQLite 不支持枚举，使用字符串常量
// UserRole: ADMIN, DOCTOR, NURSE, USER
// UserStatus: ACTIVE, INACTIVE, SUSPENDED
// Gender: MALE, FEMALE, UNKNOWN
// OrderStatus: PENDING, CONFIRMED, PROCESSING, PAID, COMPLETED, CANCELLED, REFUNDED
// OrderType: MEDICAL, EXAMINATION, MEDICINE, OTHER
// PaymentMethod: CASH, ALIPAY, WECHAT, CARD, INSURANCE
// PaymentStatus: PENDING, SUCCESS, FAILED, CANCELLED
// RefundStatus: PENDING, APPROVED, REJECTED, COMPLETED